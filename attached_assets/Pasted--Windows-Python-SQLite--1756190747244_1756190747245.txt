ملف: مفصّل بالعربي لبناء "نظام إدارة محل الحسيني" (Windows, Python, SQLite)

مقدمة عامة

أريد برنامج ويندوز مبني ببايثون يستخدم SQLite كقاعدة بيانات محلية. اسم النظام: "الحسيني". الواجهة عربية بالكامل (RTL) ويجب أن تكون واجهة احترافية، متعددة النوافذ (كل وظيفة تفتح نافذة مستقلة وليست داخل تبويبات محشورة)، مع دعم داك مود ونسخ احتياطي، وطباعة فواتير، ورسوم بيانية وتحليل وتفاصيل كاملة لكل قسم.

الهدف النهائي

تسليم تطبيق Windows (قابل للتشغيل كملف EXE) + شفرة المصدر + ملف README بالعربية يشرح طريقة التشغيل والتثبيت. التطبيق يجب أن يعمل على Windows 10/11 و Python 3.10+.

المتطلبات الوظيفية (Functional Requirements)

التحقق وإنشاء قاعدة البيانات عند تشغيل التطبيق:

عند فتح التطبيق يتحقق هل ملف قاعدة البيانات موجود (مسار افتراضي: %APPDATA%\AlHussinyShop\hussiny.db أو ملف داخل مجلد التطبيق). إذا غير موجود ينشئ القاعدة ويطبق الـ schema الافتراضي.

يجب إنشاء مستخدم أدمين افتراضي: البريد: alhussiny@admin.com وكلمة المرور: admin@1234 (يتم تخزينها مشفّرة / مُهَشَّشة).

المستخدمون والصلاحيات:

نظام مستخدمين مع أدوار (roles) قابلة للتخصيص: Admin, Manager, Cashier, Technician, Viewer.

واجهة لإضافة/تعديل/حذف المستخدمين وتعيين الصلاحيات (CRUD).

سجل audit لكل عملية دخول وخروج وتعديلات حساسة.

إدارة المخزون (ملحقات هواتف - الفئات التالية):

الفئات: سماعات اذن, سماعات, شاحن, ماوس, ميكات, ليدر, اوتو جي, جراب, وصلة مايكرو, وصلة تايب, اكسسوار, ستاند, سكرينه, ايربودز, كمبيوتر, باور بنك, اخري.

لكل منتج: رمز SKU، اسم عربي، وصف، فئة، سعر شراء، سعر بيع، كمية في المخزن، حد تنبيه كمية منخفضة، مزود، تاريخ إدخال، barcode (اختياري).

حركات مخزون: ترحيل دخول/خروج (استلام مشتريات، بيع، مرتجع، تحويل بين مخازن).

نظام فواتير وقابل للطباعة:

إنشاء فاتورة مبيعات (يمكن إضافة منتجات، تحديد كميات، حسومات نسبية/مقدارية، ضريبة (VAT) إن وُجِدت).

طباعة فاتورة A4 ونسخة قياسية للطابعات الحرارية (support ESC/POS إن أمكن).

إمكانية حفظ/طباعة فاتورة كـPDF و/أو تصدير إلى Excel/CSV.

نظام مرتجعات (Returns):

معالجة مرتجعات المبيعات مع تعديل المخزون وخلق سجل للمرتجع وربطه بالفاتورة الأصلية.

قسم صيانة (Hardware & Software):

قبول أجهزة للصيانة مع رقم ملف/تذكرة، وصف المشكلة، قطع غيار مستخدمة، تكلفة، حالة (قيد الفحص، قيد الانتظار، تم الإصلاح، غير قابل للإصلاح)، ملاحظات، تاريخ الدخول/الخروج، عميل مرتبط.

طباعة استلام الصيانة وإيصال تسليم بعد الإصلاح.

تحويلات رصيد (شحن كروت/معاملات يدوية):

تسجيل معاملات تحويل رصيد يدوياً: فودافون كاش، اتصالات كاش، اورانج كاش، اكسس كاش، كروت فكّ، وغيرها.

لكل معاملة: نوع التحويل، المبلغ، رقم العميل/الطرف، رقم التشغيل (ID)، المستخدم الذي سجلها، التاريخ.

تقارير شاملة ومرنة:

تقارير مبيعات يومية/أسبوعية/شهرية/سنوية.

تقرير أرباح/خسائر (Revenue vs Cost) لكل فترة.

تقرير حركة مخزون (السلع المنخفضة، أكثر المنتجات مبيعاً، منتجات بلا مبيعات).

تقارير الصيانة، تقارير مرتجعات، تقارير تحويلات الرصيد.

إمكانية فلترة البيانات تاريخياً وبحسب المستخدم والفئة.

داشبورد وخرائط/رسوم بيانية:

داشبورد رئيسي: مخططات زمنية للمبيعات، مخزون خطير، أعلى 10 منتجات مبيعا، ملخص اليوم.

صفحة تقارير تحتوي رسوم بيانية تفاعلية (خط زمني، أعمدة، دائرية).

بحث متقدم (Global search):

صندوق بحث عام يبحث فورياً (live search) في: أسماء المنتجات، أرقام الفواتير، أرقام العملاء، أرقام التذاكر، أكواد SKU، أرقام هواتف، وصف الصيانة.

دعم البحث الجزئي (contains), البحث بحسب بداية الكلمة, تجاهل التشكيل والحركات العربية، دعم لفترات التاريخ كمحدد.

نسخ احتياطي واستعادة (Backups):

خيار نسخ احتياطي يدوي إلى ملف .db مُسمّى أو ملف مضغوط يحتوي على DB + ملفات المرفقات.

خيار استعادة من نسخة.

خيار مزامنة النسخة الاحتياطية مع OneDrive/Google Drive: توفير خيار تصدير الملف للمجلد المحلي الخاص بالمزامنة أو رفع عبر API (اختياري — إن لم ترغب بالـAPI يمكن توضيح أن المستخدم يختار مجلد المزامنة يدويًا).

جدولة نسخ احتياطية تلقائية (يومي/أسبوعي) مع حفظ آخر N نسخ.

واجهة مستخدم متقدمة ومتطلبات تصميمية:

العربية RTL بالكامل، خطوط واضحة (مثل "Noto Kufi Arabic" أو "Cairo"), واجهة مريحة على دقة شاشة 1366x768 فما فوق.

نوافذ متعددة: كل زر/قسم يفتح نافذة منفصلة قابلة للسحب/تغيير الحجم، وكل نافذة بها scroll إذا المحتوى طويل.

واجهة قابلة لتخصيص (الألوان، داك مود، إعدادات الصفحة للطباعة).

شريط أدوات علوي مع بحث عام وحالة المستخدم (مستخدم حالي، خروج).

إعدادات وتفضيلات البرنامج:

إعدادات الضريبة، العملة، معلومات المحل (اسم المحل، عنوان، هاتف، شعار)، قالب الفاتورة (نص التذييل)، إعدادات الطابعة.

استيراد وتصدير:

استيراد/تصدير CSV للمنتجات، العملاء، الحركات.

الأمان والجودة:

تخزين كلمات المرور مشفرة (bcrypt أو مشابه)، جلسات تسجيل دخول مع وقت انتهاء الجلسة.

استخدام استعلامات محمية (parameterized queries) لمنع SQL injection.

سجل أخطاء وevents logging.

المخطط الأساسي لقاعدة البيانات (Schema suggestions)

users (id, email, password_hash, name, role_id, created_at, last_login, active)

roles (id, name, permissions_json)

products (id, sku, name_ar, description_ar, category_id, cost_price, sale_price, quantity, min_quantity, barcode, supplier_id, created_at)

categories (id, name_ar)

suppliers (id, name, phone, address)

stock_movements (id, product_id, change_qty, type, reference_id, date, user_id, note)

type: purchase, sale, return, adjustment, transfer

customers (id, name, phone, address, notes)

sales (id, invoice_no, customer_id, total, tax, discount, paid, change, user_id, created_at, status)

sale_items (id, sale_id, product_id, quantity, unit_price, line_total)

returns (id, sale_id, product_id, quantity, reason, refund_amount, date, user_id)

repairs (id, ticket_no, customer_id, device_model, problem_desc, status, entry_date, exit_date, parts_cost, labor_cost, notes)

transfers (id, type, amount, from_account, to_account, note, user_id, date)

backups (id, file_path, created_at, created_by)

audit_logs (id, user_id, action, details, timestamp)

ملاحظات تقنية ومكتبات مقترحة

واجهة المستخدم: PyQt6 أو PySide6 (يفضل PyQt6 لما يوفره من مرونة و Widgets قوية). بديل أخف: Tkinter لكنه أقل جمالاً.

ORM / DB: SQLAlchemy لتسهيل العمل مع SQLite، أو استخدام sqlite3 مع طبقة DAO واضحة.

التشفير: bcrypt (passlib أو bcrypt).

طباعة PDF: ReportLab أو إنشاء HTML وطباعته عبر wkhtmltopdf أو استخدام Qt printing framework.

الرسوم البيانية: matplotlib أو PyQtGraph أو plotly (plotly يوفّر تفاعل جيد لكن يحتاج bundling).

طباعة حرارية: python-escpos (إن كانت الطابعة تدعم ESC/POS).

تصدير/استيراد Excel: pandas و openpyxl.

إنشاء الـEXE: PyInstaller مع تكوين لربط جميع الـdata وres.

متطلبات قابلة للاختبار (Acceptance Criteria)

عند تشغيل البرنامج للمرة الأولى وإن لم يكن ملف DB موجودًا، يُنْشَأ DB وتُضاف بيانات أدمين .

تسجيل الدخول كالأدمين باستخدام alhussiny@admin.com و admin@1234 (لكن تخزين بكلمة مُهَشَّشة).

إمكانية إنشاء فاتورة وطباعة/تصديرها وظهور تأثيرها في مخزون التطبيق.

إمكانية استلام جهاز للصيانة وتتبعه وتحديث حالته.

تقارير أساسية تعمل وتُظهر بيانات صحيحة.

البحث العام يعثر على السجلات ذات الصلة بسرعة.

مهام مرقمة للمطور (Roadmap / Tasks)

إعداد المشروع والـrepo + virtualenv + requirements.txt.

تصميم DB schema وكتابة migration / إنشاء دالة init_db() التي تنشئ DB تلقائياً.

شاشة تسجيل الدخول وواجهة رئيسية (باستغلال Multi-window architecture).

وحدات CRUD للمخزون، المبيعات، المرتجعات، الصيانة، التحويلات.

نظام مستخدمين وصلاحيات.

طباعة الفواتير وتهيئة القوالب.

تقارير وداشبورد + الرسوم البيانية.

نسخ احتياطي واستعادة + خيار المزامنة.

اختبار شامل، إصلاح الأخطاء، وتحزيم للتوزيع (PyInstaller).

مخرجات متوقعة من المطوّر (Deliverables)

شفرة مصدرية مُنظّمة على Git repo.

ملف requirements.txt و/أو environment.yml.

EXE قابل للتشغيل على Windows + تعليمات التثبيت.

ملف README عربي يوضح كيفية الإعداد والاستخدام والتغيير.

ملف SQL أو سكربت init لإنشاء DB.

دليل مستخدم عربي (موجز) يشرح العمليات الأساسية.

نقاط أمنية وتنبيهات

لا تخزن كلمات المرور نصًا عاديًا.

النسخ الاحتياطي الآلي يجب أن يكون قابل للإيقاف من إعدادات الخصوصية.

عند عمل مزامنة مع خدمات خارجية (Google Drive / OneDrive) اطلب موافقة صريحة من المستخدم وقدم خياراُ لرفع الملف يدوياً.

اقتراحات تحسين (Features you may add later)

نظام نقاط ولاء للعملاء.

إدارة ملفات الوسائط (صور المنتجات، صور الأجهزة في الصيانة).

تنبيهات عبر إشعارات ويندوز أو عبر أوبشن ربط بإيميل.

تقارير مجدولة ترسل CSV/PDF عبر إيميل تلقائياً.

نصيحة للمطوّر لتسهيل العمل

قسّم المشروع إلى حزم: ui/, models/, controllers/, services/, utils/.

اكتب اختبارات وحدية داخل tests/ للـcritical logic (حساب الفاتورة، حركة المخزون، استرجاع).

اضف logging مفصل للـerrors مع مستوى DEBUG/INFO/ERROR.

نص موجز لتضمينه في بداية العرض أو المهمة عند تكليف مطوّر (يمكن نسخه مباشرة):

"المهمة: بناء نظام إدارة محل "الحسيني" — تطبيق ويندوز ببايثون وSQLite. المطلوب تطبيق كل المواصفات الموضّحة في الملف المرفق: إنشاء قاعدة بيانات تلقائياً عند التشغيل، واجهة عربية RTL متعددة النوافذ، إدارة مخزون مفصَّل للفئات المذكورة، فواتير قابلة للطباعة، مرتجعات، قسم صيانة، تحويل رصيد يدوي، تقارير ورسوم بيانية، نظام مستخدمين وصلاحيات، نسخ احتياطية ومزامنة اختيارية مع OneDrive/Google Drive، وتغليف للتوزيع على Windows. الرجاء الالتزام بمعايير الأمان وحفظ كل شيء في مستودع Git مع README عربي."



